require("colors");const globby=require("globby"),path=require("path"),chokidar=require("chokidar"),mm=require("micromatch"),spawn=require("cross-spawn"),fs=require("fs"),debug=require("debug"),flatCache=require("flat-cache"),mglogger={log:debug("MixGlob"),err:debug("MixGlob:Error"),debug:debug("MixGlob:debug")},DEBUG_ENV_VARS=["DEBUG","DEBUG_HIDE_DATE","DEBUG_COLORS","DEBUG_DEPTH","DEBUG_SHOW_HIDDEN"];noDebugEnvVar()&&(debug.enable("MixGlob:debug"),mglogger.debug("!!!!! ----- No debug env var ----- !!!!"),mglogger.debug("env vars:"),mglogger.debug(Object.keys(process.env)),debug.enable("MixGlob, MixGlob:*, -MixGlob:debug"));const MixGlob=function(){mglogger.debug("in MixGlob Module");var e,s={sass:{mapExt:"css"},js:{mapExt:"js"},less:{mapExt:"css"},stylus:{mapExt:"css"},react:{mapExt:"js"},ts:{mapExt:"js"},preact:{mapExt:"js"}};function t(e,s){return"string"==typeof s?s:!(!s||!s.hasOwnProperty(e))&&s[e]}function i(e,s,i){mglogger.debug("in mapExt"),mglogger.debug({ext:e,mapping:s,defaultMapping:i});var g=t(e,s);return g||t(e,i)}function g(e,t){let g=null;return s[e]&&(g=s[e].mapExt),function(e,s,t){const g=i(e,s,t);if(g)return g;throw"defaultMapExt: no mapping precised, neither it's supported by default"}(e,t,g)}function o(e,s,t,g,o,l,c){let n,a,p,h,u,m;mglogger.debug("mixBaseGlob ===".bgBlue),mglogger.log("mix function: %s".yellow,e),mglogger.log("Glob: ".yellow+s);try{n=function(e){if(Array.isArray(e)||"string"==typeof e)return globby.sync(e);if("object"==typeof e)return globby.sync(e.pattern,e.options);if("function"==typeof e)return e(globby);throw new Error("Wrong glb parameter, possible types are string|array|object ({pattern, options})|function {return <promise> -> resolve paths}")}(s)}catch(e){return void mglogger.err(e)}mglogger.log("Matched files ====".green),mglogger.log(n),this.watchedFiles=[...this.watchedFiles,...n.filter(e=>!this.watchedFiles.includes(e))],mglogger.log("Total handled files :".cyan),mglogger.log(this.watchedFiles),this.watchedGlobs=[...this.watchedGlobs,s],c||(mglogger.debug("! NO WATCH ENTERED !!!!!!!!!!!!! -------"),mglogger.debug("watching ==first+>".blue),mglogger.debug(s.yellow),this.watchers.push(chokidar.watch(s,{ignoreInitial:!0}).on("add",e=>{r.call(this,"add",e,s)}).on("unlink",e=>{r.call(this,"unlink",e,s)}).on("unlinkDir",e=>{mglogger.debug("UNLINK DIR CHOKIDAR -------------"),r.call(this,"unlinkDir",e,s)})));let b,d=this.mapping.mapExt&&this.mapping.mapExt.byExt||l,f=this.mapping.base&&(this.mapping.base.byExt||this.mapping.base.byFunc);if(o||(o={}),o.compileSpecifier||(o.compileSpecifier={}),!o.compileSpecifier.disabled){let e="compile";o.compileSpecifier.specifier&&(e=o.compileSpecifier.specifier),u=new RegExp("."+e+".(?!.*"+e+".)","g")}o.mapping&&o.mapping.ext&&(d=o.mapping.ext),o.base&&(f=o.base),n.forEach(s=>{h=path.extname(s).substr(1),a=f?s.replace(function(e,s,t){if("string"==typeof e)return e;if("function"==typeof e)return e(s,t,mm);if("object"==typeof e)return e[t]||e.default}(f,s,h),""):path.basename(s),o.compileSpecifier.disable||(a=a.replace(u,".")),m=new RegExp(h+"$","g"),mglogger.debug("this.mapping.mapExt.byExt === "),mglogger.debug(this.mapping.mapExt&&this.mapping.mapExt.byExt),b=i(h,d,l),h&&h!==b&&(a=a.replace(m,b)),p=path.join(t,a),mglogger.debug("out ======".bgGreen),console.log({fl:a,out:p}),this.mixInst=g?this.mixInst[e](s,p,g):this.mixInst[e](s,p),mglogger.debug(`mix ${e} func exec`.yellow),mglogger.debug({file:s,out:p,mixOptions:g})})}function r(e,s,t){console.log(s);let i="";switch(e){case"add":i="File added :";break;case"unlink":i="File removed :";break;case"unlinkDir":i="Directory removed :"}if(!this.onRestart){this.onRestart=!0;try{if(mm.every(s,t)){mglogger.log(i.bgBlue),mglogger.log(s.yellow),mglogger.log("Corresponding watcher glob: ".bgBlue),mglogger.log(t),mglogger.debug(this.watchedGlobs),mglogger.log("restart...".cyan),this.cache.setKey("is_subprocess",!0),this.cache.save(),mglogger.debug("is_subprocess = "),mglogger.debug(this.cache.getKey("is_subprocess"));const e=spawn("npm",["run",this.shouldWatch],{detached:!0,stdio:"inherit",cwd:process.cwd()});e.on("error",e=>{mglogger.debug("subprocess.on(error)"),mglogger.err(e),this.cache.setKey("is_subprocess",!1),this.cache.save()}),e.unref(),mglogger.debug("pid ==== "+e.pid),this.pidsList=[e.pid],this.cache.setKey("pids",this.pidsList),this.cache.save(),setTimeout(()=>{process.exit(0)},1e3)}}catch(e){mglogger.err(e)}}}function l(e){if(mglogger.debug("Mix glob constructor"),mglogger.debug("Mix glob constructor: argv ="),mglogger.debug(process.argv),mglogger.log("Mix glob".yellow),this.cache=flatCache.load("laravel-mix-glob"),this.shouldWatch=!!process.argv.some(e=>e.includes("watch"))&&"watch",this.shouldWatch||(this.shouldWatch=!!process.argv.some(e=>e.includes("hot"))&&"hot"),this.shouldWatch&&process&&process.stdout){mglogger.debug({pidscache:this.cache.getKey("pids"),is_subprocess_cache:this.cache.getKey("is_subprocess")}),this.pidsList=this.cache.getKey("pids")||[],this.is_subprocess=this.cache.getKey("is_subprocess")||!1,mglogger.debug("READ FROM CACHE"),mglogger.debug({pidsList:this.pidsList,is_subprocess:this.is_subprocess});let e=!1;this.is_subprocess&&(this.cache.setKey("is_subprocess",!1),e=!0),this.pidsList.length>0&&(this.cache.setKey("pids",[]),e=!0),e&&this.cache.save(),this.onRestart=!1,process.stdout.on("data",e=>{e=e.toString(),this.is_subprocess?(mglogger.log("To quit type 'c' multiple times".bgBlue),mglogger.debug(`'${e}'`),"c"!==e&&"C"!==e||(mglogger.debug('ENTERED data === "c" || "C"'),mglogger.log("closing ...".green),mglogger.log("pids ".cyan+JSON.stringify(this.pidsList).yellow),this.cache.setKey("pids",[]),this.cache.save(),this.pidsList.forEach(e=>{try{process.kill(e,"SIGINT")}catch(s){mglogger.err("Error killing pid ".red+e)}}),mglogger.log("closed! CONTROL+C now".blue),process.exit(0))):mglogger.log("CONTROL+C to exit".bgBlue+"  (twice)")}),process.on("SIGINT",()=>{setTimeout(()=>{this.is_subprocess&&(mglogger.log("SIGINT".bgRed),process.exit(0))},2e3)})}if(!e.mix)throw new Error("mix instance missing!".red);this.mapping=e&&e.mapping||{},this.mixInst=e.mix,this.watchers=[],this.watchedFiles=[],this.watchedGlobs=[],Object.keys(this.mixInst).forEach((e,s)=>{["mix","config","scripts","styles"].includes(e)||(this[e]=function(s,t,i,r){const l=g(e,this.mapping.mapExt&&this.mapping.mapExt.byFunc);return o.call(this,e,s,t,i,r,l,!this.shouldWatch),this}.bind(this))})}return(e=l.prototype).createMapping=function(e){},e.mix=function(e){return function(){return this.mixInst[e].apply(this.mixInst,arguments),this}.bind(this)},l}();function noDebugEnvVar(){for(const e of Object.keys(process.env))if(DEBUG_ENV_VARS.includes(e))return!1;return!0}module.exports=MixGlob;