require("colors");const glob=require("glob"),path=require("path"),chokidar=require("chokidar"),mm=require("micromatch"),{exec:exec}=require("child_process"),spawn=require("cross-spawn"),fs=require("fs"),MixGlob=function(){function e(e,o){return"string"==typeof o?o:!(!o||!o.hasOwnProperty(e))&&o[e]}function o(o,s,i){var t=e(o,s);return t||e(o,i)}function s(e,s,i,t,l,c,n){console.log("mixBaseGlob ===".bgBlue),console.log("Glob: ".yellow),console.log(s);const r=function(e){Array.isArray(e)||(e=[e]);const o=[];return e.forEach(e=>{console.log("glb glob mutli =".yellow),console.log(e),o.push(...glob.sync(e))}),console.log("files glob mutli".cyan),console.log(o),o}(s);let a,p,g,h,d;console.log("gb files ====".green),console.log(r),this.watchedFiles=[...this.watchedFiles,...r.filter(e=>!this.watchedFiles.includes(e))],console.log("Total watched files".cyan),console.log(this.watchedFiles),Array.isArray(s)||(s=[s]),this.watchedGlobs=[...this.watchedGlobs,...s],n||(this.watcher?(console.log("watching ==+>".blue),console.log(s.yellow),this.watcher.add(s)):(console.log("watching ==first+>".blue),console.log(s.yellow),this.watcher=chokidar.watch(s).on("add",e=>{if(mm.every(e,this.watchedGlobs)&&!this.watchedFiles.includes(e)){console.log("File added".bgCyan),console.log(e.yellow),console.log("restart...".cyan);const o=spawn("npm",["run","watch"],{detached:!0,stdio:"inherit",cwd:process.cwd()});!function(e){try{if(fs.existsSync("pid.log")){const o=fs.readFileSync("pid.log");o.push(e),fs.writeFileSync("pid.log",JSON.stringify(o))}else fs.writeFileSync("pid.log",JSON.stringify([e]))}catch(e){console.log(e.red)}}(o.pid),o.unref(),setTimeout(()=>{process.exit(0)},1e3)}})));let u,f=c;if(l||(l={}),l.compileSpecifier||(l.compileSpecifier={}),!l.compileSpecifier.disabled){let e="compile";l.compileSpecifier.specifier&&(e=l.compileSpecifier.specifier),h=new RegExp("."+e+".(?!.*"+e+".)","g")}l.extMapping&&(f=l.extMapping),r.forEach(s=>{a=l.base?s.replace(l.base,""):s,l.compileSpecifier.disable||(a=a.replace(h,".")),g=path.extname(a).substr(1),d=new RegExp(g+"$","g"),u=o(g,f,c),g!==u&&(a=a.replace(d,u)),p=path.join(i,a),this.mixInst=t?this.mixInst[e](s,p,t):this.mixInst[e](s,p)})}console.log("in MixGlob".yellow);var i,t={sass:{mapExt:"css"},js:{mapExt:"js"},less:{mapExt:"css"},stylus:{mapExt:"css"},react:{mapExt:"js"},ts:{mapExt:"js"},preact:{mapExt:"js"}};function l(e,s){let i=null;return t[e]&&(i=t[e].mapExt),function(e,s,i){const t=o(e,s,i);if(t)return t;throw"defaultMapExt: no mapping precised, neither it's supported by default"}(e,s,i)}function c(e){if(console.log("Mix glob".yellow),process&&process.stdout&&process.stdout.on("data",e=>{if(e=e.toString(),console.log("To quit type 'c' multiple times"),"c"===e.toString()||"C"===e){const e=function(){try{return fs.existsSync("pid.log")?JSON.parse(fs.readFileSync("pid.log")):[]}catch(e){return console.log(e),[]}}();console.log("closing ...".green),console.log("pids ".cyan+JSON.stringify(e).yellow),e.forEach(e=>{try{process.kill(e,"SIGINT")}catch(o){console.log("Error killing pid ".red+e)}}),fs.existsSync("pid.log")&&fs.unlinkSync("pid.log"),console.log("closed! CONTROL+C now".blue),process.exit(0)}}),process.on("SIGINT",()=>{setTimeout(()=>{console.log("SIGINT".bgRed),process.exit(0)},2e3)}),!e.mix)throw new Error("mix instance missing!");e&&e.mapping&&(this.mapping=e.mapping),e&&e.mapping||(this.mapping={}),this.mixInst=e.mix,this.watchedFiles=[],this.watchedGlobs=[],Object.keys(this.mixInst).forEach((e,o)=>{["mix","config","scripts","styles"].includes(e)||(this[e]=function(o,i,t,c){const n=l(e,this.mapping.mapExt);return s.call(this,e,o,i,t,c,n),this}.bind(this))})}return(i=c.prototype).createMapping=function(e){},i.mix=function(e){return function(){return this.mixInst[e].apply(this.mixInst,arguments),this}.bind(this)},c}();module.exports=MixGlob;